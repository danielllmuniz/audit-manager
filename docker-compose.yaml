services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - api-gateway
    networks:
      - audit-network

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "${API_GATEWAY_PORT}:3000"
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    environment:
      - PORT=${API_GATEWAY_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - APPLICATION_SERVICE_URL=${APPLICATION_SERVICE_URL}
    depends_on:
      - application-service
    networks:
      - audit-network

  application-service:
    build:
      context: ./application-service
      dockerfile: Dockerfile
    container_name: application-service
    ports:
      - "${APPLICATION_SERVICE_PORT}:5000"
    volumes:
      - ./application-service:/app
      - uploads_data:/app/uploads
    environment:
      - FLASK_ENV=${FLASK_ENV}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_HOST=${MYSQL_HOST}
      - DB_PORT=${MYSQL_PORT}
      - DB_NAME=${MYSQL_DATABASE}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - audit-network

  db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "${MYSQL_USER}",
          "-p${MYSQL_PASSWORD}",
        ]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - audit-network
volumes:
  mysql_data:
  uploads_data:
  rabbitmq_data:

networks:
  audit-network:
    driver: bridge
